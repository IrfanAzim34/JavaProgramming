Printf

We use one of these printf method to format the output:

	System.out.printf(format, arguments);
	System.out.printf(locale, format, arguments);


We specify the formatting rules using the format parameter. Rules start with the % character.

Let's look at a quick example before we dive into the details of the various formatting rules:


	System.out.printf("Hello %s!", "World");

This produces the following output:

	Hello World!

As shown above, the format string contains plain text and two formatting rules. The first rule is used to format the string argument. The second rule adds a newline character to the end of the string.

====

Format Rules:

Format specifiers include flags, width, precision, and conversion characters in this sequence:

	%[flags][width][.precision]conversion-character

Specifiers in the brackets are optional.

Internally, printf() uses the java.util.Formatter class to parse the format string and generate the output. Additional format string options can be found in the Formatter Javadoc.

===

Conversion Characters:

The conversion-character is required and determines how the argument is formatted.

Conversion characters are only valid for certain data types. Here are some common ones:

s => formats strings.
d => formats decimal integers.
f => formats floating-point numbers.

===

Optional Modifiers:
The [flags] define standard ways to modify the output and are most common for formatting integers and floating-point numbers.

The [width] specifies the field width for outputting the argument. It represents the minimum number of characters written to the output.

The [.precision] specifies the number of digits of precision when outputting floating-point values. Additionally, we can use it to define the length of a substring to extract from a String.

===

(Please try and see the differences on the console):

***** String Examples ***** 

To format a simple string, we'll use the %s combination. Additionally, we can make the string uppercase by %S:

	printf("'%s' %n", "language");
	printf("'%S' %n", "language");

And this is the output:

	'language' 
	'LANGUAGE'
-----------------------
Also, to specify a minimum length, we can specify a width:

	printf("'%15s' %n", "language");

which gives us:

	'       language'
	 123456789111111	-> 15 characters
	          012345 
-----------------------
If we need to left-justify our string, we can use the – flag:

	printf("'%-10s' %n", "language");

This is the output:

	'language  '
	 1234567891	-> 10 characters
	          0 
-----------------------
Even more, we can limit the number of characters in our output by specifying a precision:

	System.out.printf("%2.2s", "Hi there!");

The first x number in %x.ys syntax is the padding. y is the number of chars.

For our example here, the output is Hi.

-----------------------

***** Char Examples ***** 

The result of %c is a Unicode character:

	System.out.printf("%c%n", 's');
	System.out.printf("%C%n", 's');

The capital letter C will uppercase the result:

	s
	S

-----------------------

***** Integer Examples ***** 

The printf() method accepts all the integers available in the language — byte, short, int, long, and BigInteger if we use %d:

	System.out.printf("simple integer: %d%n", 10000L);

With the help of the d character, we'll have this result:

	simple integer: 10000
-----------------------
In case we need to format our number with the thousands separator, we can use the , flag. And we can also format our results for different locales:

	System.out.printf(Locale.US, "%,d %n", 10000);
	System.out.printf(Locale.ITALY, "%,d %n", 10000);

As we can see, the formatting in the US is different than in Italy (Notice the dots):

	10,000 
	10.000

-----------------------

***** Float and Double Examples ***** 

To format a float number, we'll need the f format:

	System.out.printf("%f%n", 5.1473);

which will output:

	5.147300
-----------------------
Of course, the first thing that comes to mind is to control the precision:

	System.out.printf("'%6.2f'%n", 5.1473);

Here we define the width of our number as 6, and the length of the decimal part is 2:

	'  5.15'
	 123456 -> 6 characters
-----------------------
Here we have one-space padding from the beginning of the number to support the predefined width.

To have our output in scientific notation, we just use the e conversion-character:

	System.out.printf("'%5.2e'%n", 5.1473);

And this is our result:

	'5.15e+00'

